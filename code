import logging
import requests
from datetime import time
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

def info(context: CallbackContext) -> None:
    job = context.job
    context.bot.send_message(job.context, text='Добавлено новое заведение!')

def remove_job_if_exists(name: str, context: CallbackContext) -> bool:
    current_jobs = context.job_queue.get_jobs_by_name(name)
    if not current_jobs:
        return False
    for job in current_jobs:
        job.schedule_removal()
    return True

def daily(update: Update, context: CallbackContext) -> None:
    # context.job_queue.run_once(info, due, context=chat_id, name=str(chat_id))
    chat_id = update.message.chat_id
    b = time(9, 47, 30)
    context.job_queue.run_daily(info, b, context=chat_id, name=str(chat_id))
    update.message.reply_text('Добавлено новое заведение!')

def stp(update: Update, context: CallbackContext) -> None:
    chat_id = update.message.chat_id
    job_removed = remove_job_if_exists(str(chat_id), context)
    text = 'Timer successfully cancelled!' if job_removed else 'You have no active timer.'
    update.message.reply_text(text)


def start(update: Update, context: CallbackContext) -> None:
    """Sends a message with three inline buttons attached."""
    keyboard = [
        [InlineKeyboardButton("Еда", callback_data='1'),InlineKeyboardButton("Концерты", callback_data='2'),],
        [InlineKeyboardButton("Общественные места", callback_data='3')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text('Выберите сферу:', reply_markup=reply_markup)


def change_daily(update: Update, context: CallbackContext) -> None:
    chat_id = update.message.chat_id
    job_removed = remove_job_if_exists(str(chat_id), context)
    b = time(int(context.args[0]), int(context.args[1]), int(context.args[2]))
    context.job_queue.run_daily(info, b, context=chat_id, name=str(chat_id))
    text = 'daily: '+ context.args[0] +' '+ context.args[1] +' '+ context.args[2]
    if job_removed:
        text += ' Old one was removed.'
    update.message.reply_text(text)


def req(update, context):
    chat = update.effective_chat
    headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'}
    url = 'https://innovations.kh.ua/2go/wp-json/wp/v2/cafes/'   
    r = requests.get(url,headers=headers)
    jsn = r.json()
    text = jsn[0]['acf']['name'] +" " +jsn[0]['acf']['price']+ " " +jsn[0]['acf']['location'] +" " +jsn[0]['acf']['cuisine']+" " +jsn[0]['acf']['hookah']

    context.bot.send_message(chat_id=chat.id, text=text)


def button(update: Update, context: CallbackContext) -> None:
    """Parses the CallbackQuery and updates the message text."""
    query = update.callback_query

    keyboard_16p = [[InlineKeyboardButton("$", callback_data='11'),InlineKeyboardButton("$$", callback_data='11'),InlineKeyboardButton("$$$", callback_data='11')],]

    reply_markup_16p = InlineKeyboardMarkup(keyboard_16p)

    keyboard_price = [[InlineKeyboardButton("$", callback_data='22'),InlineKeyboardButton("$$", callback_data='22'),InlineKeyboardButton("$$$", callback_data='22')],]

    reply_markup_price = InlineKeyboardMarkup(keyboard_price)

    keyboard_pay = [[InlineKeyboardButton("$", callback_data='33'),InlineKeyboardButton("$$", callback_data='33'),InlineKeyboardButton("$$$", callback_data='33')],
    [InlineKeyboardButton("Бесплатно", callback_data='33')],]

    reply_markup_pay = InlineKeyboardMarkup(keyboard_pay)

    keyboard_kitchen = [[InlineKeyboardButton("Италия", callback_data='13'),InlineKeyboardButton("Япония", callback_data='13'),InlineKeyboardButton("Америка", callback_data='13')],]

    reply_markup_kitchen = InlineKeyboardMarkup(keyboard_kitchen)

    keyboard_perfomer = [[InlineKeyboardButton("Европейские", callback_data='21'),InlineKeyboardButton("Американские", callback_data='21'),InlineKeyboardButton("СНГ", callback_data='21')],]

    reply_markup_perfomer = InlineKeyboardMarkup(keyboard_perfomer)

    keyboard_place = [[InlineKeyboardButton("Парки", callback_data='33'),InlineKeyboardButton("Музеи", callback_data='33'),InlineKeyboardButton("Театр", callback_data='33')],]

    reply_markup_place = InlineKeyboardMarkup(keyboard_place)

    keyboard_hookan = [[InlineKeyboardButton("Да", callback_data='111'),InlineKeyboardButton("Нет", callback_data='222')],]

    reply_markup_hookan = InlineKeyboardMarkup(keyboard_hookan)





    # CallbackQueries need to be answered, even if no notification to the user is needed
    # Some clients may have trouble otherwise. See https://core.telegram.org/bots/api#callbackquery
    query.answer()
    print(query.data)

    if query.data == '1':
        query.edit_message_text(text="Выберите средний чек заведения", reply_markup=reply_markup_16p)
    elif query.data == '2':
        query.edit_message_text(text="Стоимость билетов", reply_markup=reply_markup_price)
    elif query.data == '3':
        query.edit_message_text(text="Стоимость посещения", reply_markup=reply_markup_pay)

    elif query.data == '11':
        query.edit_message_text(text="Кухня в заведении", reply_markup=reply_markup_kitchen)

    elif query.data == '22':
        query.edit_message_text(text="Исполнитель", reply_markup=reply_markup_perfomer)

    elif query.data == '33':
        query.edit_message_text(text="Куда хотите пойти", reply_markup=reply_markup_place)

    elif query.data == '13':
        query.edit_message_text(text="Кальян в заведении", reply_markup=reply_markup_hookan)
        
    elif query.data == '111':
     headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'}
     url = 'https://innovations.kh.ua/2go/wp-json/wp/v2/cafes/'   
     r = requests.get(url,headers=headers)
     jsn = r.json()
     text = jsn[0]['acf']['name'] +" " +jsn[0]['acf']['price']+ " " +jsn[0]['acf']['location'] +" " +jsn[0]['acf']['cuisine']+" " +jsn[0]['acf']['hookah']
     print (text)
     query.edit_message_text(text= text)
  

    else:
        query.edit_message_text(text="")

def help_command(update: Update, context: CallbackContext) -> None:
    """Displays info on how to use the bot."""
    update.message.reply_text("Use /start to test this bot.")


def main() -> None:
    """Run the bot."""
    # Create the Updater and pass it your bot's token.
    updater = Updater("1917953373:AAH9j7OZxtqyjWYvIDOtSP_8NApx2eBz4q8")

    updater.dispatcher.add_handler(CommandHandler('start', start))
    updater.dispatcher.add_handler(CallbackQueryHandler(button))
    updater.dispatcher.add_handler(CommandHandler('help', help_command))
    updater.dispatcher.add_handler(CommandHandler('daily', daily))
    updater.dispatcher.add_handler(CommandHandler('stp', stp))
    updater.dispatcher.add_handler(CommandHandler('change_daily', change_daily))
    updater.dispatcher.add_handler(CommandHandler('req', req))
    # Start the Bot
    updater.start_polling()

    # Run the bot until the user presses Ctrl-C or the process receives SIGINT,
    # SIGTERM or SIGABRT
    updater.idle()


if __name__ == '__main__':
    main()
